{"version":3,"sources":["generators/lua.js","generators/lua/variables.js","generators/lua/variables_dynamic.js","generators/lua/text.js","generators/lua/procedures.js","generators/lua/math.js","generators/lua/loops.js","generators/lua/logic.js","generators/lua/lists.js","generators/lua/colour.js","generators/lua/all.js"],"names":["objectUtils","stringUtils","Generator","inputTypes","Names","Lua","addReservedWords","ORDER_ATOMIC","ORDER_HIGH","ORDER_EXPONENTIATION","ORDER_UNARY","ORDER_MULTIPLICATIVE","ORDER_ADDITIVE","ORDER_CONCATENATION","ORDER_RELATIONAL","ORDER_AND","ORDER_OR","ORDER_NONE","isInitialized","init","Lua.init","workspace","Object","getPrototypeOf","call","nameDB_","reset","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","Lua.finish","code","definitions","values","definitions_","join","scrubNakedValue","Lua.scrubNakedValue","line","quote_","Lua.quote_","string","replace","multiline_quote_","Lua.multiline_quote_","split","map","lines","scrub_","Lua.scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","i","inputList","length","type","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","NameType","getName","getFieldValue","VARIABLE","argument0","valueToCode","varName","order","indexOf","itemCount_","element0","element1","elements","value","substring","text","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","where","at","atOrder","start","Error","match","where1","at1","at1Order","where2","at2","at2Order","end","operator","OPERATORS","LEFT","RIGHT","BOTH","msg","getField","sub","from","to","funcName","PROCEDURE","xfix1","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","INDENT","loopTrap","INFINITE_LOOP_TRAP","branch","statementToCode","returnValue","xfix2","args","variables","getVars","tuple","hasReturnValue_","Number","argument1","arg","CONSTANTS","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","provideSum","func","list","argument2","CONTINUE_STATEMENT","addContinueLabel","repeats","String","isNumber","parseInt","addLoopTrap","getDistinctName","loopVar","until","variable0","startVar","endVar","increment","incValue","Math","abs","step","xfix","loop","getSurroundLoop","suppressPrefixSuffix","n","conditionCode","branchCode","getInput","defaultArgument","value_if","value_then","value_else","Array","element","repeatCount","item","getListIndex","listName","opt_at","mode","listVar","toLowerCase","at1Param","at2Param","direction","input","delimiter","r","g","b","colour1","colour2","ratio","exports","moduleExports"],"mappings":"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","file":"lua_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Lua for blocks.\n * Based on Ellen Spertus's blocky-lua project.\n * @suppress {checkTypes|globalThis}\n */\n'use strict';\n\ngoog.module('Blockly.Lua');\n\nconst objectUtils = goog.require('Blockly.utils.object');\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {Block} = goog.requireType('Blockly.Block');\nconst {Generator} = goog.require('Blockly.Generator');\nconst {inputTypes} = goog.require('Blockly.inputTypes');\nconst {Names} = goog.require('Blockly.Names');\nconst {Workspace} = goog.requireType('Blockly.Workspace');\n\n\n/**\n * Lua code generator.\n * @type {!Generator}\n */\nconst Lua = new Generator('Lua');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n */\nLua.addReservedWords(\n    // Special character\n    '_,' +\n    // From theoriginalbit's script:\n    // https://github.com/espertus/blockly-lua/issues/6\n    '__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,' +\n    'fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,' +\n    'native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,' +\n    'printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,' +\n    'setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,' +\n    'tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,' +\n    // Not included in the script, probably because it wasn't enabled:\n    'HTTP,' +\n    // Keywords (http://www.lua.org/pil/1.3.html).\n    'and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,or,' +\n    'repeat,return,then,true,until,while,' +\n    // Metamethods (http://www.lua.org/manual/5.2/manual.html).\n    'add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,' +\n    // Basic functions (http://www.lua.org/manual/5.2/manual.html, section 6.1).\n    'assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,' +\n    'loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,' +\n    'setmetatable,tonumber,tostring,type,_VERSION,xpcall,' +\n    // Modules (http://www.lua.org/manual/5.2/manual.html, section 6.3).\n    'require,package,string,table,math,bit32,io,file,os,debug');\n\n/**\n * Order of operation ENUMs.\n * http://www.lua.org/manual/5.3/manual.html#3.4.8\n */\nLua.ORDER_ATOMIC = 0;  // literals\n// The next level was not explicit in documentation and inferred by Ellen.\nLua.ORDER_HIGH = 1;            // Function calls, tables[]\nLua.ORDER_EXPONENTIATION = 2;  // ^\nLua.ORDER_UNARY = 3;           // not # - ~\nLua.ORDER_MULTIPLICATIVE = 4;  // * / %\nLua.ORDER_ADDITIVE = 5;        // + -\nLua.ORDER_CONCATENATION = 6;   // ..\nLua.ORDER_RELATIONAL = 7;      // < > <=  >= ~= ==\nLua.ORDER_AND = 8;             // and\nLua.ORDER_OR = 9;              // or\nLua.ORDER_NONE = 99;\n\n/**\n * Note: Lua is not supporting zero-indexing since the language itself is\n * one-indexed, so the generator does not repoct the oneBasedIndex configuration\n * option used for lists and text.\n */\n\n/**\n * Whether the init method has been called.\n * @type {?boolean}\n */\nLua.isInitialized = false;\n\n/**\n * Initialise the database of variable names.\n * @param {!Workspace} workspace Workspace to generate code from.\n */\nLua.init = function(workspace) {\n  // Call Blockly.Generator's init.\n  Object.getPrototypeOf(this).init.call(this);\n\n  if (!this.nameDB_) {\n    this.nameDB_ = new Names(this.RESERVED_WORDS_);\n  } else {\n    this.nameDB_.reset();\n  }\n  this.nameDB_.setVariableMap(workspace.getVariableMap());\n  this.nameDB_.populateVariables(workspace);\n  this.nameDB_.populateProcedures(workspace);\n\n  this.isInitialized = true;\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nLua.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  const definitions = objectUtils.values(this.definitions_);\n  // Call Blockly.Generator's finish.\n  code = Object.getPrototypeOf(this).finish.call(this, code);\n  this.isInitialized = false;\n\n  this.nameDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything. In Lua, an expression is not a legal statement, so we must assign\n * the value to the (conventionally ignored) _.\n * http://lua-users.org/wiki/ExpressionsAsStatements\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nLua.scrubNakedValue = function(line) {\n  return 'local _ = ' + line + '\\n';\n};\n\n/**\n * Encode a string as a properly escaped Lua string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} Lua string.\n * @protected\n */\nLua.quote_ = function(string) {\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n               .replace(/\\n/g, '\\\\\\n')\n               .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline Lua string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} Lua string.\n * @protected\n */\nLua.multiline_quote_ = function(string) {\n  const lines = string.split(/\\n/g).map(this.quote_);\n  // Join with the following, plus a newline:\n  // .. '\\n' ..\n  return lines.join(' .. \\'\\\\n\\' ..\\n');\n};\n\n/**\n * Common tasks for generating Lua from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Block} block The current block.\n * @param {string} code The Lua code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} Lua code with comments and subsequent blocks added.\n * @protected\n */\nLua.scrub_ = function(block, code, opt_thisOnly) {\n  let commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    let comment = block.getCommentText();\n    if (comment) {\n      comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n      commentCode += this.prefixLines(comment, '-- ') + '\\n';\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (let i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type === inputTypes.VALUE) {\n        const childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = this.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += this.prefixLines(comment, '-- ');\n          }\n        }\n      }\n    }\n  }\n  const nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  const nextCode = opt_thisOnly ? '' : this.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\nexports.luaGenerator = Lua;\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.variables');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['variables_get'] = function(block) {\n  // Variable getter.\n  const code =\n      Lua.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  return [code, Lua.ORDER_ATOMIC];\n};\n\nLua['variables_set'] = function(block) {\n  // Variable setter.\n  const argument0 = Lua.valueToCode(block, 'VALUE', Lua.ORDER_NONE) || '0';\n  const varName =\n      Lua.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + argument0 + '\\n';\n};\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for dynamic variable blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.variablesDynamic');\n\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n/** @suppress {extraRequire} */\ngoog.require('Blockly.Lua.variables');\n\n\n// Lua is dynamically typed.\nLua['variables_get_dynamic'] = Lua['variables_get'];\nLua['variables_set_dynamic'] = Lua['variables_set'];\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for text blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.texts');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['text'] = function(block) {\n  // Text value.\n  const code = Lua.quote_(block.getFieldValue('TEXT'));\n  return [code, Lua.ORDER_ATOMIC];\n};\n\nLua['text_multiline'] = function(block) {\n  // Text value.\n  const code = Lua.multiline_quote_(block.getFieldValue('TEXT'));\n  const order =\n      code.indexOf('..') !== -1 ? Lua.ORDER_CONCATENATION : Lua.ORDER_ATOMIC;\n  return [code, order];\n};\n\nLua['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  if (block.itemCount_ === 0) {\n    return [\"''\", Lua.ORDER_ATOMIC];\n  } else if (block.itemCount_ === 1) {\n    const element = Lua.valueToCode(block, 'ADD0', Lua.ORDER_NONE) || \"''\";\n    const code = 'tostring(' + element + ')';\n    return [code, Lua.ORDER_HIGH];\n  } else if (block.itemCount_ === 2) {\n    const element0 =\n        Lua.valueToCode(block, 'ADD0', Lua.ORDER_CONCATENATION) || \"''\";\n    const element1 =\n        Lua.valueToCode(block, 'ADD1', Lua.ORDER_CONCATENATION) || \"''\";\n    const code = element0 + ' .. ' + element1;\n    return [code, Lua.ORDER_CONCATENATION];\n  } else {\n    const elements = [];\n    for (let i = 0; i < block.itemCount_; i++) {\n      elements[i] = Lua.valueToCode(block, 'ADD' + i, Lua.ORDER_NONE) || \"''\";\n    }\n    const code = 'table.concat({' + elements.join(', ') + '})';\n    return [code, Lua.ORDER_HIGH];\n  }\n};\n\nLua['text_append'] = function(block) {\n  // Append to a variable in place.\n  const varName =\n      Lua.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const value =\n      Lua.valueToCode(block, 'TEXT', Lua.ORDER_CONCATENATION) || \"''\";\n  return varName + ' = ' + varName + ' .. ' + value + '\\n';\n};\n\nLua['text_length'] = function(block) {\n  // String or array length.\n  const text = Lua.valueToCode(block, 'VALUE', Lua.ORDER_UNARY) || \"''\";\n  return ['#' + text, Lua.ORDER_UNARY];\n};\n\nLua['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const text = Lua.valueToCode(block, 'VALUE', Lua.ORDER_UNARY) || \"''\";\n  return ['#' + text + ' == 0', Lua.ORDER_RELATIONAL];\n};\n\nLua['text_indexOf'] = function(block) {\n  // Search the text for a substring.\n  const substring = Lua.valueToCode(block, 'FIND', Lua.ORDER_NONE) || \"''\";\n  const text = Lua.valueToCode(block, 'VALUE', Lua.ORDER_NONE) || \"''\";\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = Lua.provideFunction_('firstIndexOf', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(str, substr, 1, true)\n  if i == nil then\n    return 0\n  end\n  return i\nend\n`);\n  } else {\n    functionName = Lua.provideFunction_('lastIndexOf', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(string.reverse(str), string.reverse(substr), 1, true)\n  if i then\n    return #str + 2 - i - #substr\n  end\n  return 0\nend\n`);\n  }\n  const code = functionName + '(' + text + ', ' + substring + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const atOrder = (where === 'FROM_END') ? Lua.ORDER_UNARY : Lua.ORDER_NONE;\n  const at = Lua.valueToCode(block, 'AT', atOrder) || '1';\n  const text = Lua.valueToCode(block, 'VALUE', Lua.ORDER_NONE) || \"''\";\n  let code;\n  if (where === 'RANDOM') {\n    const functionName = Lua.provideFunction_('text_random_letter', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local index = math.random(string.len(str))\n  return string.sub(str, index, index)\nend\n`);\n    code = functionName + '(' + text + ')';\n  } else {\n    let start;\n    if (where === 'FIRST') {\n      start = '1';\n    } else if (where === 'LAST') {\n      start = '-1';\n    } else {\n      if (where === 'FROM_START') {\n        start = at;\n      } else if (where === 'FROM_END') {\n        start = '-' + at;\n      } else {\n        throw Error('Unhandled option (text_charAt).');\n      }\n    }\n    if (start.match(/^-?\\w*$/)) {\n      code = 'string.sub(' + text + ', ' + start + ', ' + start + ')';\n    } else {\n      // use function to avoid reevaluation\n      const functionName = Lua.provideFunction_('text_char_at', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(str, index)\n  return string.sub(str, index, index)\nend\n`);\n      code = functionName + '(' + text + ', ' + start + ')';\n    }\n  }\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_getSubstring'] = function(block) {\n  // Get substring.\n  const text = Lua.valueToCode(block, 'STRING', Lua.ORDER_NONE) || \"''\";\n\n  // Get start index.\n  const where1 = block.getFieldValue('WHERE1');\n  const at1Order = (where1 === 'FROM_END') ? Lua.ORDER_UNARY : Lua.ORDER_NONE;\n  const at1 = Lua.valueToCode(block, 'AT1', at1Order) || '1';\n  let start;\n  if (where1 === 'FIRST') {\n    start = 1;\n  } else if (where1 === 'FROM_START') {\n    start = at1;\n  } else if (where1 === 'FROM_END') {\n    start = '-' + at1;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  // Get end index.\n  const where2 = block.getFieldValue('WHERE2');\n  const at2Order = (where2 === 'FROM_END') ? Lua.ORDER_UNARY : Lua.ORDER_NONE;\n  const at2 = Lua.valueToCode(block, 'AT2', at2Order) || '1';\n  let end;\n  if (where2 === 'LAST') {\n    end = -1;\n  } else if (where2 === 'FROM_START') {\n    end = at2;\n  } else if (where2 === 'FROM_END') {\n    end = '-' + at2;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = 'string.sub(' + text + ', ' + start + ', ' + end + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_changeCase'] = function(block) {\n  // Change capitalization.\n  const operator = block.getFieldValue('CASE');\n  const text = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  let functionName;\n  if (operator === 'UPPERCASE') {\n    functionName = 'string.upper';\n  } else if (operator === 'LOWERCASE') {\n    functionName = 'string.lower';\n  } else if (operator === 'TITLECASE') {\n    // There are shorter versions at\n    // http://lua-users.org/wiki/SciteTitleCase\n    // that do not preserve whitespace.\n    functionName = Lua.provideFunction_('text_titlecase', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local buf = {}\n  local inWord = false\n  for i = 1, #str do\n    local c = string.sub(str, i, i)\n    if inWord then\n      table.insert(buf, string.lower(c))\n      if string.find(c, \"%s\") then\n        inWord = false\n      end\n    else\n      table.insert(buf, string.upper(c))\n      inWord = true\n    end\n  end\n  return table.concat(buf)\nend\n`);\n  }\n  const code = functionName + '(' + text + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_trim'] = function(block) {\n  // Trim spaces.\n  const OPERATORS = {LEFT: '^%s*(,-)', RIGHT: '(.-)%s*$', BOTH: '^%s*(.-)%s*$'};\n  const operator = OPERATORS[block.getFieldValue('MODE')];\n  const text = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  const code = 'string.gsub(' + text + ', \"' + operator + '\", \"%1\")';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_print'] = function(block) {\n  // Print statement.\n  const msg = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n};\n\nLua['text_prompt_ext'] = function(block) {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = Lua.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  }\n\n  const functionName = Lua.provideFunction_('text_prompt', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(msg)\n  io.write(msg)\n  io.flush()\n  return io.read()\nend\n`);\n  let code = functionName + '(' + msg + ')';\n\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'tonumber(' + code + ', 10)';\n  }\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_prompt'] = Lua['text_prompt_ext'];\n\nLua['text_count'] = function(block) {\n  const text = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  const sub = Lua.valueToCode(block, 'SUB', Lua.ORDER_NONE) || \"''\";\n  const functionName = Lua.provideFunction_('text_count', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle)\n  if #needle == 0 then\n    return #haystack + 1\n  end\n  local i = 1\n  local count = 0\n  while true do\n    i = string.find(haystack, needle, i, true)\n    if i == nil then\n      break\n    end\n    count = count + 1\n    i = i + #needle\n  end\n  return count\nend\n`);\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_replace'] = function(block) {\n  const text = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  const from = Lua.valueToCode(block, 'FROM', Lua.ORDER_NONE) || \"''\";\n  const to = Lua.valueToCode(block, 'TO', Lua.ORDER_NONE) || \"''\";\n  const functionName = Lua.provideFunction_('text_replace', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement)\n  local buf = {}\n  local i = 1\n  while i <= #haystack do\n    if string.sub(haystack, i, i + #needle - 1) == needle then\n      for j = 1, #replacement do\n        table.insert(buf, string.sub(replacement, j, j))\n      end\n      i = i + #needle\n    else\n      table.insert(buf, string.sub(haystack, i, i))\n      i = i + 1\n    end\n  end\n  return table.concat(buf)\nend\n`);\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['text_reverse'] = function(block) {\n  const text = Lua.valueToCode(block, 'TEXT', Lua.ORDER_NONE) || \"''\";\n  const code = 'string.reverse(' + text + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for procedure blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.procedures');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  const funcName =\n      Lua.nameDB_.getName(block.getFieldValue('NAME'), NameType.PROCEDURE);\n  let xfix1 = '';\n  if (Lua.STATEMENT_PREFIX) {\n    xfix1 += Lua.injectId(Lua.STATEMENT_PREFIX, block);\n  }\n  if (Lua.STATEMENT_SUFFIX) {\n    xfix1 += Lua.injectId(Lua.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = Lua.prefixLines(xfix1, Lua.INDENT);\n  }\n  let loopTrap = '';\n  if (Lua.INFINITE_LOOP_TRAP) {\n    loopTrap = Lua.prefixLines(\n        Lua.injectId(Lua.INFINITE_LOOP_TRAP, block), Lua.INDENT);\n  }\n  let branch = Lua.statementToCode(block, 'STACK');\n  let returnValue = Lua.valueToCode(block, 'RETURN', Lua.ORDER_NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Lua.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = '';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = Lua.nameDB_.getName(variables[i], NameType.VARIABLE);\n  }\n  let code = 'function ' + funcName + '(' + args.join(', ') + ')\\n' + xfix1 +\n      loopTrap + branch + xfix2 + returnValue + 'end\\n';\n  code = Lua.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Lua.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nLua['procedures_defnoreturn'] = Lua['procedures_defreturn'];\n\nLua['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  const funcName =\n      Lua.nameDB_.getName(block.getFieldValue('NAME'), NameType.PROCEDURE);\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = Lua.valueToCode(block, 'ARG' + i, Lua.ORDER_NONE) || 'nil';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = Lua['procedures_callreturn'](block);\n  return tuple[0] + '\\n';\n};\n\nLua['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  const condition =\n      Lua.valueToCode(block, 'CONDITION', Lua.ORDER_NONE) || 'false';\n  let code = 'if ' + condition + ' then\\n';\n  if (Lua.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code +=\n        Lua.prefixLines(Lua.injectId(Lua.STATEMENT_SUFFIX, block), Lua.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    const value = Lua.valueToCode(block, 'VALUE', Lua.ORDER_NONE) || 'nil';\n    code += Lua.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += Lua.INDENT + 'return\\n';\n  }\n  code += 'end\\n';\n  return code;\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for math blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.math');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['math_number'] = function(block) {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code < 0 ? Lua.ORDER_UNARY : Lua.ORDER_ATOMIC;\n  return [code, order];\n};\n\nLua['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  const OPERATORS = {\n    'ADD': [' + ', Lua.ORDER_ADDITIVE],\n    'MINUS': [' - ', Lua.ORDER_ADDITIVE],\n    'MULTIPLY': [' * ', Lua.ORDER_MULTIPLICATIVE],\n    'DIVIDE': [' / ', Lua.ORDER_MULTIPLICATIVE],\n    'POWER': [' ^ ', Lua.ORDER_EXPONENTIATION],\n  };\n  const tuple = OPERATORS[block.getFieldValue('OP')];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = Lua.valueToCode(block, 'A', order) || '0';\n  const argument1 = Lua.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nLua['math_single'] = function(block) {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Lua.valueToCode(block, 'NUM', Lua.ORDER_UNARY) || '0';\n    return ['-' + arg, Lua.ORDER_UNARY];\n  }\n  if (operator === 'POW10') {\n    arg = Lua.valueToCode(block, 'NUM', Lua.ORDER_EXPONENTIATION) || '0';\n    return ['10 ^ ' + arg, Lua.ORDER_EXPONENTIATION];\n  }\n  if (operator === 'ROUND') {\n    arg = Lua.valueToCode(block, 'NUM', Lua.ORDER_ADDITIVE) || '0';\n  } else {\n    arg = Lua.valueToCode(block, 'NUM', Lua.ORDER_NONE) || '0';\n  }\n\n  let code;\n  switch (operator) {\n    case 'ABS':\n      code = 'math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log(' + arg + ', 10)';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'ROUND':\n      // This rounds up.  Blockly does not specify rounding direction.\n      code = 'math.floor(' + arg + ' + .5)';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(math.rad(' + arg + '))';\n      break;\n    case 'COS':\n      code = 'math.cos(math.rad(' + arg + '))';\n      break;\n    case 'TAN':\n      code = 'math.tan(math.rad(' + arg + '))';\n      break;\n    case 'ASIN':\n      code = 'math.deg(math.asin(' + arg + '))';\n      break;\n    case 'ACOS':\n      code = 'math.deg(math.acos(' + arg + '))';\n      break;\n    case 'ATAN':\n      code = 'math.deg(math.atan(' + arg + '))';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS = {\n    'PI': ['math.pi', Lua.ORDER_HIGH],\n    'E': ['math.exp(1)', Lua.ORDER_HIGH],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Lua.ORDER_MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Lua.ORDER_HIGH],\n    'SQRT1_2': ['math.sqrt(1 / 2)', Lua.ORDER_HIGH],\n    'INFINITY': ['math.huge', Lua.ORDER_HIGH],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nLua['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES = {\n    'EVEN': [' % 2 == 0', Lua.ORDER_MULTIPLICATIVE, Lua.ORDER_RELATIONAL],\n    'ODD': [' % 2 == 1', Lua.ORDER_MULTIPLICATIVE, Lua.ORDER_RELATIONAL],\n    'WHOLE': [' % 1 == 0', Lua.ORDER_MULTIPLICATIVE, Lua.ORDER_RELATIONAL],\n    'POSITIVE': [' > 0', Lua.ORDER_RELATIONAL, Lua.ORDER_RELATIONAL],\n    'NEGATIVE': [' < 0', Lua.ORDER_RELATIONAL, Lua.ORDER_RELATIONAL],\n    'DIVISIBLE_BY': [null, Lua.ORDER_MULTIPLICATIVE, Lua.ORDER_RELATIONAL],\n    'PRIME': [null, Lua.ORDER_NONE, Lua.ORDER_HIGH],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck = Lua.valueToCode(block, 'NUMBER_TO_CHECK',\n      inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = Lua.provideFunction_('math_isPrime', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(n)\n  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if n == 2 or n == 3 then\n    return true\n  end\n  -- False if n is NaN, negative, is 1, or not whole.\n  -- And false if n is divisible by 2 or 3.\n  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then\n    return false\n  end\n  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x = 6, math.sqrt(n) + 1.5, 6 do\n    if n % (x - 1) == 0 or n % (x + 1) == 0 then\n      return false\n    end\n  end\n  return true\nend\n`);\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor = Lua.valueToCode(block, 'DIVISOR',\n        Lua.ORDER_MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, Lua will produce a nan.\n    // Let's produce nil if we can determine this at compile-time.\n    if (divisor === '0') {\n      return ['nil', Lua.ORDER_ATOMIC];\n    }\n    // The normal trick to implement ?: with and/or doesn't work here:\n    //   divisor == 0 and nil or number_to_check % divisor == 0\n    // because nil is false, so allow a runtime failure. :-(\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n};\n\nLua['math_change'] = function(block) {\n  // Add to a variable in place.\n  const argument0 = Lua.valueToCode(block, 'DELTA', Lua.ORDER_ADDITIVE) || '0';\n  const varName =\n      Lua.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  return varName + ' = ' + varName + ' + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nLua['math_round'] = Lua['math_single'];\n// Trigonometry functions have a single operand.\nLua['math_trig'] = Lua['math_single'];\n\nLua['math_on_list'] = function(block) {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = Lua.valueToCode(block, 'LIST', Lua.ORDER_NONE) || '{}';\n  let functionName;\n\n  // Functions needed in more than one case.\n  function provideSum() {\n    return Lua.provideFunction_('math_sum', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local result = 0\n  for _, v in ipairs(t) do\n    result = result + v\n  end\n  return result\nend\n`);\n  }\n\n  switch (func) {\n    case 'SUM':\n      functionName = provideSum();\n      break;\n\n    case 'MIN':\n      // Returns 0 for the empty list.\n      functionName = Lua.provideFunction_('math_min', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = math.huge\n  for _, v in ipairs(t) do\n    if v < result then\n      result = v\n    end\n  end\n  return result\nend\n`);\n      break;\n\n    case 'AVERAGE':\n      // Returns 0 for the empty list.\n      functionName = Lua.provideFunction_('math_average', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  return ${provideSum()}(t) / #t\nend\n`);\n      break;\n\n    case 'MAX':\n      // Returns 0 for the empty list.\n      functionName = Lua.provideFunction_('math_max', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = -math.huge\n  for _, v in ipairs(t) do\n    if v > result then\n      result = v\n    end\n  end\n  return result\nend\n`);\n      break;\n\n    case 'MEDIAN':\n      // This operation excludes non-numbers.\n      functionName = Lua.provideFunction_('math_median', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  if #t == 0 then\n    return 0\n  end\n  local temp = {}\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      table.insert(temp, v)\n    end\n  end\n  table.sort(temp)\n  if #temp % 2 == 0 then\n    return (temp[#temp / 2] + temp[(#temp / 2) + 1]) / 2\n  else\n    return temp[math.ceil(#temp / 2)]\n  end\nend\n`);\n      break;\n\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // The Lua version includes non-numbers.\n      functionName = Lua.provideFunction_('math_modes', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  local counts = {}\n  for _, v in ipairs(t) do\n    if counts[v] == nil then\n      counts[v] = 1\n    else\n      counts[v] = counts[v] + 1\n    end\n  end\n  local biggestCount = 0\n  for _, v  in pairs(counts) do\n    if v > biggestCount then\n      biggestCount = v\n    end\n  end\n  local temp = {}\n  for k, v in pairs(counts) do\n    if v == biggestCount then\n      table.insert(temp, k)\n    end\n  end\n  return temp\nend\n`);\n      break;\n\n    case 'STD_DEV':\n      functionName = Lua.provideFunction_('math_standard_deviation', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local m\n  local vm\n  local total = 0\n  local count = 0\n  local result\n  m = #t == 0 and 0 or ${provideSum()}(t) / #t\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      vm = v - m\n      total = total + (vm * vm)\n      count = count + 1\n    end\n  end\n  result = math.sqrt(total / (count-1))\n  return result\nend\n`);\n      break;\n\n    case 'RANDOM':\n      functionName = Lua.provideFunction_('math_random_list', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return nil\n  end\n  return t[math.random(#t)]\nend\n`);\n      break;\n\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [functionName + '(' + list + ')', Lua.ORDER_HIGH];\n};\n\nLua['math_modulo'] = function(block) {\n  // Remainder computation.\n  const argument0 =\n      Lua.valueToCode(block, 'DIVIDEND', Lua.ORDER_MULTIPLICATIVE) || '0';\n  const argument1 =\n      Lua.valueToCode(block, 'DIVISOR', Lua.ORDER_MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Lua.ORDER_MULTIPLICATIVE];\n};\n\nLua['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  const argument0 = Lua.valueToCode(block, 'VALUE', Lua.ORDER_NONE) || '0';\n  const argument1 =\n      Lua.valueToCode(block, 'LOW', Lua.ORDER_NONE) || '-math.huge';\n  const argument2 =\n      Lua.valueToCode(block, 'HIGH', Lua.ORDER_NONE) || 'math.huge';\n  const code = 'math.min(math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  const argument0 = Lua.valueToCode(block, 'FROM', Lua.ORDER_NONE) || '0';\n  const argument1 = Lua.valueToCode(block, 'TO', Lua.ORDER_NONE) || '0';\n  const code = 'math.random(' + argument0 + ', ' + argument1 + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['math.random()', Lua.ORDER_HIGH];\n};\n\nLua['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = Lua.valueToCode(block, 'X', Lua.ORDER_NONE) || '0';\n  const argument1 = Lua.valueToCode(block, 'Y', Lua.ORDER_NONE) || '0';\n  return [\n    'math.deg(math.atan2(' + argument1 + ', ' + argument0 + '))', Lua.ORDER_HIGH\n  ];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for loop blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.loops');\n\nconst stringUtils = goog.require('Blockly.utils.string');\nconst {NameType} = goog.require('Blockly.Names');\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\n/**\n * This is the text used to implement a <pre>continue</pre>.\n * It is also used to recognise <pre>continue</pre>s in generated code so that\n * the appropriate label can be put at the end of the loop body.\n * @const {string}\n */\nconst CONTINUE_STATEMENT = 'goto continue\\n';\n\n/**\n * If the loop body contains a \"goto continue\" statement, add a continue label\n * to the loop body. Slightly inefficient, as continue labels will be generated\n * in all outer loops, but this is safer than duplicating the logic of\n * blockToCode.\n *\n * @param {string} branch Generated code of the loop body\n * @return {string} Generated label or '' if unnecessary\n */\nconst addContinueLabel = function(branch) {\n  if (branch.indexOf(CONTINUE_STATEMENT) !== -1) {\n    // False positives are possible (e.g. a string literal), but are harmless.\n    return branch + Lua.INDENT + '::continue::\\n';\n  } else {\n    return branch;\n  }\n};\n\nLua['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = Lua.valueToCode(block, 'TIMES', Lua.ORDER_NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'math.floor(' + repeats + ')';\n  }\n  let branch = Lua.statementToCode(block, 'DO');\n  branch = Lua.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch);\n  const loopVar = Lua.nameDB_.getDistinctName('count', NameType.VARIABLE);\n  const code =\n      'for ' + loopVar + ' = 1, ' + repeats + ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nLua['controls_repeat'] = Lua['controls_repeat_ext'];\n\nLua['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n      Lua.valueToCode(\n          block, 'BOOL', until ? Lua.ORDER_UNARY : Lua.ORDER_NONE) ||\n      'false';\n  let branch = Lua.statementToCode(block, 'DO');\n  branch = Lua.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch);\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ' do\\n' + branch + 'end\\n';\n};\n\nLua['controls_for'] = function(block) {\n  // For loop.\n  const variable0 =\n      Lua.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const startVar = Lua.valueToCode(block, 'FROM', Lua.ORDER_NONE) || '0';\n  const endVar = Lua.valueToCode(block, 'TO', Lua.ORDER_NONE) || '0';\n  const increment = Lua.valueToCode(block, 'BY', Lua.ORDER_NONE) || '1';\n  let branch = Lua.statementToCode(block, 'DO');\n  branch = Lua.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch);\n  let code = '';\n  let incValue;\n  if (stringUtils.isNumber(startVar) && stringUtils.isNumber(endVar) &&\n      stringUtils.isNumber(increment)) {\n    // All arguments are simple numbers.\n    const up = Number(startVar) <= Number(endVar);\n    const step = Math.abs(Number(increment));\n    incValue = (up ? '' : '-') + step;\n  } else {\n    code = '';\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    incValue =\n        Lua.nameDB_.getDistinctName(variable0 + '_inc', NameType.VARIABLE);\n    code += incValue + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment) + '\\n';\n    } else {\n      code += 'math.abs(' + increment + ')\\n';\n    }\n    code += 'if (' + startVar + ') > (' + endVar + ') then\\n';\n    code += Lua.INDENT + incValue + ' = -' + incValue + '\\n';\n    code += 'end\\n';\n  }\n  code +=\n      'for ' + variable0 + ' = ' + startVar + ', ' + endVar + ', ' + incValue;\n  code += ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nLua['controls_forEach'] = function(block) {\n  // For each loop.\n  const variable0 =\n      Lua.nameDB_.getName(block.getFieldValue('VAR'), NameType.VARIABLE);\n  const argument0 = Lua.valueToCode(block, 'LIST', Lua.ORDER_NONE) || '{}';\n  let branch = Lua.statementToCode(block, 'DO');\n  branch = Lua.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch);\n  const code = 'for _, ' + variable0 + ' in ipairs(' + argument0 + ') do \\n' +\n      branch + 'end\\n';\n  return code;\n};\n\nLua['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (Lua.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Lua.injectId(Lua.STATEMENT_PREFIX, block);\n  }\n  if (Lua.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Lua.injectId(Lua.STATEMENT_SUFFIX, block);\n  }\n  if (Lua.STATEMENT_PREFIX) {\n    const loop = block.getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Lua.injectId(Lua.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + CONTINUE_STATEMENT;\n  }\n  throw Error('Unknown flow statement.');\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for logic blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.logic');\n\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (Lua.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Lua.injectId(Lua.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n        Lua.valueToCode(block, 'IF' + n, Lua.ORDER_NONE) || 'false';\n    let branchCode = Lua.statementToCode(block, 'DO' + n);\n    if (Lua.STATEMENT_SUFFIX) {\n      branchCode = Lua.prefixLines(\n          Lua.injectId(Lua.STATEMENT_SUFFIX, block), Lua.INDENT) + branchCode;\n    }\n    code +=\n        (n > 0 ? 'else' : '') + 'if ' + conditionCode + ' then\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || Lua.STATEMENT_SUFFIX) {\n    let branchCode = Lua.statementToCode(block, 'ELSE');\n    if (Lua.STATEMENT_SUFFIX) {\n      branchCode = Lua.prefixLines(\n                       Lua.injectId(Lua.STATEMENT_SUFFIX, block), Lua.INDENT) +\n          branchCode;\n    }\n    code += 'else\\n' + branchCode;\n  }\n  return code + 'end\\n';\n};\n\nLua['controls_ifelse'] = Lua['controls_if'];\n\nLua['logic_compare'] = function(block) {\n  // Comparison operator.\n  const OPERATORS =\n      {'EQ': '==', 'NEQ': '~=', 'LT': '<', 'LTE': '<=', 'GT': '>', 'GTE': '>='};\n  const operator = OPERATORS[block.getFieldValue('OP')];\n  const argument0 = Lua.valueToCode(block, 'A', Lua.ORDER_RELATIONAL) || '0';\n  const argument1 = Lua.valueToCode(block, 'B', Lua.ORDER_RELATIONAL) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, Lua.ORDER_RELATIONAL];\n};\n\nLua['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  const operator = (block.getFieldValue('OP') === 'AND') ? 'and' : 'or';\n  const order = (operator === 'and') ? Lua.ORDER_AND : Lua.ORDER_OR;\n  let argument0 = Lua.valueToCode(block, 'A', order);\n  let argument1 = Lua.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = (operator === 'and') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nLua['logic_negate'] = function(block) {\n  // Negation.\n  const argument0 = Lua.valueToCode(block, 'BOOL', Lua.ORDER_UNARY) || 'true';\n  const code = 'not ' + argument0;\n  return [code, Lua.ORDER_UNARY];\n};\n\nLua['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';\n  return [code, Lua.ORDER_ATOMIC];\n};\n\nLua['logic_null'] = function(block) {\n  // Null data type.\n  return ['nil', Lua.ORDER_ATOMIC];\n};\n\nLua['logic_ternary'] = function(block) {\n  // Ternary operator.\n  const value_if = Lua.valueToCode(block, 'IF', Lua.ORDER_AND) || 'false';\n  const value_then = Lua.valueToCode(block, 'THEN', Lua.ORDER_AND) || 'nil';\n  const value_else = Lua.valueToCode(block, 'ELSE', Lua.ORDER_OR) || 'nil';\n  const code = value_if + ' and ' + value_then + ' or ' + value_else;\n  return [code, Lua.ORDER_OR];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for list blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.lists');\n\nconst {NameType} = goog.require('Blockly.Names');\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['{}', Lua.ORDER_HIGH];\n};\n\nLua['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  const elements = new Array(block.itemCount_);\n  for (let i = 0; i < block.itemCount_; i++) {\n    elements[i] = Lua.valueToCode(block, 'ADD' + i, Lua.ORDER_NONE) || 'None';\n  }\n  const code = '{' + elements.join(', ') + '}';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  const functionName = Lua.provideFunction_('create_list_repeated', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(item, count)\n  local t = {}\n  for i = 1, count do\n    table.insert(t, item)\n  end\n  return t\nend\n  `);\n  const element = Lua.valueToCode(block, 'ITEM', Lua.ORDER_NONE) || 'None';\n  const repeatCount = Lua.valueToCode(block, 'NUM', Lua.ORDER_NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['lists_length'] = function(block) {\n  // String or array length.\n  const list = Lua.valueToCode(block, 'VALUE', Lua.ORDER_UNARY) || '{}';\n  return ['#' + list, Lua.ORDER_UNARY];\n};\n\nLua['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  const list = Lua.valueToCode(block, 'VALUE', Lua.ORDER_UNARY) || '{}';\n  const code = '#' + list + ' == 0';\n  return [code, Lua.ORDER_RELATIONAL];\n};\n\nLua['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  const item = Lua.valueToCode(block, 'FIND', Lua.ORDER_NONE) || \"''\";\n  const list = Lua.valueToCode(block, 'VALUE', Lua.ORDER_NONE) || '{}';\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = Lua.provideFunction_('first_index', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for k, v in ipairs(t) do\n    if v == elem then\n      return k\n    end\n  end\n  return 0\nend\n`);\n  } else {\n    functionName = Lua.provideFunction_('last_index', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for i = #t, 1, -1 do\n    if t[i] == elem then\n      return i\n    end\n  end\n  return 0\nend\n`);\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n */\nconst getListIndex = function(listName, where, opt_at) {\n  if (where === 'FIRST') {\n    return '1';\n  } else if (where === 'FROM_END') {\n    return '#' + listName + ' + 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return '#' + listName;\n  } else if (where === 'RANDOM') {\n    return 'math.random(#' + listName + ')';\n  } else {\n    return opt_at;\n  }\n};\n\nLua['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const list = Lua.valueToCode(block, 'VALUE', Lua.ORDER_HIGH) || '({})';\n\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (mode === 'REMOVE') {\n      // We can use multiple statements.\n      const atOrder =\n          (where === 'FROM_END') ? Lua.ORDER_ADDITIVE : Lua.ORDER_NONE;\n      let at = Lua.valueToCode(block, 'AT', atOrder) || '1';\n      const listVar =\n          Lua.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n      at = getListIndex(listVar, where, at);\n      const code = listVar + ' = ' + list + '\\n' +\n          'table.remove(' + listVar + ', ' + at + ')\\n';\n      return code;\n    } else {\n      // We need to create a procedure to avoid reevaluating values.\n      const at = Lua.valueToCode(block, 'AT', Lua.ORDER_NONE) || '1';\n      let functionName;\n      if (mode === 'GET') {\n        functionName = Lua.provideFunction_('list_get_' + where.toLowerCase(), [\n          'function ' + Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              ((where === 'FROM_END' || where === 'FROM_START') ? ', at)' :\n                                                                  ')'),\n          '  return t[' + getListIndex('t', where, 'at') + ']', 'end'\n        ]);\n      } else {  // `mode` === 'GET_REMOVE'\n        functionName =\n            Lua.provideFunction_('list_remove_' + where.toLowerCase(), [\n              'function ' + Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n                  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n                  // we add it as a parameter.\n                  ((where === 'FROM_END' || where === 'FROM_START') ? ', at)' :\n                                                                      ')'),\n              '  return table.remove(t, ' + getListIndex('t', where, 'at') +\n                  ')',\n              'end'\n            ]);\n      }\n      const code = functionName + '(' + list +\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n          // pass it.\n          ((where === 'FROM_END' || where === 'FROM_START') ? ', ' + at : '') +\n          ')';\n      return [code, Lua.ORDER_HIGH];\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    const atOrder = (mode === 'GET' && where === 'FROM_END') ?\n        Lua.ORDER_ADDITIVE :\n        Lua.ORDER_NONE;\n    let at = Lua.valueToCode(block, 'AT', atOrder) || '1';\n    at = getListIndex(list, where, at);\n    if (mode === 'GET') {\n      const code = list + '[' + at + ']';\n      return [code, Lua.ORDER_HIGH];\n    } else {\n      const code = 'table.remove(' + list + ', ' + at + ')';\n      if (mode === 'GET_REMOVE') {\n        return [code, Lua.ORDER_HIGH];\n      } else {  // `mode` === 'REMOVE'\n        return code + '\\n';\n      }\n    }\n  }\n};\n\nLua['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = Lua.valueToCode(block, 'LIST', Lua.ORDER_HIGH) || '{}';\n  const mode = block.getFieldValue('MODE') || 'SET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const at = Lua.valueToCode(block, 'AT', Lua.ORDER_ADDITIVE) || '1';\n  const value = Lua.valueToCode(block, 'TO', Lua.ORDER_NONE) || 'None';\n\n  let code = '';\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    // We can use multiple statements.\n    const listVar = Lua.nameDB_.getDistinctName('tmp_list', NameType.VARIABLE);\n    code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n  }\n  if (mode === 'SET') {\n    code += list + '[' + getListIndex(list, where, at) + '] = ' + value;\n  } else {  // `mode` === 'INSERT'\n    // LAST is a special case, because we want to insert\n    // *after* not *before*, the existing last element.\n    code += 'table.insert(' + list + ', ' +\n        (getListIndex(list, where, at) + (where === 'LAST' ? ' + 1' : '')) +\n        ', ' + value + ')';\n  }\n  return code + '\\n';\n};\n\nLua['lists_getSublist'] = function(block) {\n  // Get sublist.\n  const list = Lua.valueToCode(block, 'LIST', Lua.ORDER_NONE) || '{}';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const at1 = Lua.valueToCode(block, 'AT1', Lua.ORDER_NONE) || '1';\n  const at2 = Lua.valueToCode(block, 'AT2', Lua.ORDER_NONE) || '1';\n\n  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n  // we add it as a parameter.\n  const at1Param =\n      (where1 === 'FROM_END' || where1 === 'FROM_START') ? ', at1' : '';\n  const at2Param =\n      (where2 === 'FROM_END' || where2 === 'FROM_START') ? ', at2' : '';\n  const functionName = Lua.provideFunction_(\n      'list_sublist_' + where1.toLowerCase() + '_' + where2.toLowerCase(), `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(source${at1Param}${at2Param})\n  local t = {}\n  local start = ${getListIndex('source', where1, 'at1')}\n  local finish = ${getListIndex('source', where2, 'at2')}\n  for i = start, finish do\n    table.insert(t, source[i])\n  end\n  return t\nend\n`);\n  const code = functionName + '(' + list +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      ((where1 === 'FROM_END' || where1 === 'FROM_START') ? ', ' + at1 : '') +\n      ((where2 === 'FROM_END' || where2 === 'FROM_START') ? ', ' + at2 : '') +\n      ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  const list = Lua.valueToCode(block, 'LIST', Lua.ORDER_NONE) || '{}';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n\n  const functionName = Lua.provideFunction_('list_sort', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(list, typev, direction)\n  local t = {}\n  for n,v in pairs(list) do table.insert(t, v) end\n  local compareFuncs = {\n    NUMERIC = function(a, b)\n      return (tonumber(tostring(a)) or 0)\n          < (tonumber(tostring(b)) or 0) end,\n    TEXT = function(a, b)\n      return tostring(a) < tostring(b) end,\n    IGNORE_CASE = function(a, b)\n      return string.lower(tostring(a)) < string.lower(tostring(b)) end\n  }\n  local compareTemp = compareFuncs[typev]\n  local compare = compareTemp\n  if direction == -1\n  then compare = function(a, b) return compareTemp(b, a) end\n  end\n  table.sort(t, compare)\n  return t\nend\n`);\n\n  const code =\n      functionName + '(' + list + ',\"' + type + '\", ' + direction + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = Lua.valueToCode(block, 'INPUT', Lua.ORDER_NONE);\n  const delimiter = Lua.valueToCode(block, 'DELIM', Lua.ORDER_NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = Lua.provideFunction_('list_string_split', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(input, delim)\n  local t = {}\n  local pos = 1\n  while true do\n    next_delim = string.find(input, delim, pos)\n    if next_delim == nil then\n      table.insert(t, string.sub(input, pos))\n      break\n    else\n      table.insert(t, string.sub(input, pos, next_delim-1))\n      pos = next_delim + #delim\n    end\n  end\n  return t\nend\n`);\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '{}';\n    }\n    functionName = 'table.concat';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = functionName + '(' + input + ', ' + delimiter + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  const list = Lua.valueToCode(block, 'LIST', Lua.ORDER_NONE) || '{}';\n  const functionName = Lua.provideFunction_('list_reverse', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(input)\n  local reversed = {}\n  for i = #input, 1, -1 do\n    table.insert(reversed, input[i])\n  end\n  return reversed\nend\n`);\n  const code = functionName + '(' + list + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for colour blocks.\n */\n'use strict';\n\ngoog.module('Blockly.Lua.colour');\n\nconst {luaGenerator: Lua} = goog.require('Blockly.Lua');\n\n\nLua['colour_picker'] = function(block) {\n  // Colour picker.\n  const code = Lua.quote_(block.getFieldValue('COLOUR'));\n  return [code, Lua.ORDER_ATOMIC];\n};\n\nLua['colour_random'] = function(block) {\n  // Generate a random colour.\n  const code = 'string.format(\"#%06x\", math.random(0, 2^24 - 1))';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = Lua.provideFunction_('colour_rgb', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(r, g, b)\n  r = math.floor(math.min(100, math.max(0, r)) * 2.55 + .5)\n  g = math.floor(math.min(100, math.max(0, g)) * 2.55 + .5)\n  b = math.floor(math.min(100, math.max(0, b)) * 2.55 + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`);\n  const r = Lua.valueToCode(block, 'RED', Lua.ORDER_NONE) || 0;\n  const g = Lua.valueToCode(block, 'GREEN', Lua.ORDER_NONE) || 0;\n  const b = Lua.valueToCode(block, 'BLUE', Lua.ORDER_NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n\nLua['colour_blend'] = function(block) {\n  // Blend two colours together.\n  const functionName = Lua.provideFunction_('colour_blend', `\nfunction ${Lua.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio)\n  local r1 = tonumber(string.sub(colour1, 2, 3), 16)\n  local r2 = tonumber(string.sub(colour2, 2, 3), 16)\n  local g1 = tonumber(string.sub(colour1, 4, 5), 16)\n  local g2 = tonumber(string.sub(colour2, 4, 5), 16)\n  local b1 = tonumber(string.sub(colour1, 6, 7), 16)\n  local b2 = tonumber(string.sub(colour2, 6, 7), 16)\n  local ratio = math.min(1, math.max(0, ratio))\n  local r = math.floor(r1 * (1 - ratio) + r2 * ratio + .5)\n  local g = math.floor(g1 * (1 - ratio) + g2 * ratio + .5)\n  local b = math.floor(b1 * (1 - ratio) + b2 * ratio + .5)\n  return string.format(\"#%02x%02x%02x\", r, g, b)\nend\n`);\n  const colour1 =\n      Lua.valueToCode(block, 'COLOUR1', Lua.ORDER_NONE) || \"'#000000'\";\n  const colour2 =\n      Lua.valueToCode(block, 'COLOUR2', Lua.ORDER_NONE) || \"'#000000'\";\n  const ratio = Lua.valueToCode(block, 'RATIO', Lua.ORDER_NONE) || 0;\n  const code =\n      functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Lua.ORDER_HIGH];\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Complete helper functions for generating Lua for\n *     blocks.  This is the entrypoint for lua_compressed.js.\n * @suppress {extraRequire}\n */\n'use strict';\n\ngoog.module('Blockly.Lua.all');\n\nconst moduleExports = goog.require('Blockly.Lua');\ngoog.require('Blockly.Lua.colour');\ngoog.require('Blockly.Lua.lists');\ngoog.require('Blockly.Lua.logic');\ngoog.require('Blockly.Lua.loops');\ngoog.require('Blockly.Lua.math');\ngoog.require('Blockly.Lua.procedures');\ngoog.require('Blockly.Lua.texts');\ngoog.require('Blockly.Lua.variables');\ngoog.require('Blockly.Lua.variablesDynamic');\n\nexports = moduleExports;\n"]}